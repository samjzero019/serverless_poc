org: usamajameel
app: serverless-poc
service: serverless-poc
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  timeout: 30 # since lambdas are attached to gateway thus it is limited to max 30s 

  # permissions for lambda to call other resources
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    

  

functions:
  ### ======= AUTH START

  loginUser:
    handler: functions/user/login.handler
    environment: 
      user_pool_id : !Ref ServerlessCognitoUserPool
      client_id: !Ref ServerlessCognitoPoolUserClient
    package:
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/user/login.js
        - functions/user/include.js
    events:
      - http:
          path: /api/users/login
          method: post
          cors: true


  signupUser:
    handler: functions/user/signup.handler
    environment: 
      user_pool_id : !Ref ServerlessCognitoUserPool
    package:
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/user/signup.js
        - functions/user/include.js
    events:
      - http:
          path: /api/users/signup
          method: post
          cors: true

  ### ====== AUTH END 

  getCategories:
    handler: functions/getCategories.handler
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/getCategories.js
    events:
      - http:
          path: /api/categories
          method: get
          cors: true

      
  getProducts:
    handler: functions/getProducts.handler
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/getProducts.js
    events:
      - http:
          path: /api/getProducts
          method: get
          cors: true          
          

  getCategoryProducts:
    handler: functions/getCategoryProducts.handler
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/getCategoryProducts.js
    events:
      - http:
          path: /api/getProducts/{category}
          method: get
          cors: true
         

  getProductDetail:
    handler: functions/getProductDetail.handler
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/getProductDetail.js
    events:
      - http:
          path: /api/getProductDetails/{productID}
          method: get
          cors: true

  # func for order 
  PlaceOrder:
    handler: functions/user/placeOrder.handler
    environment:
      TABLE_NAME: "OrderTable"
    package:
      patterns:
        - '!functions/**'
        - '!package.json'
        - '!package-lock.json'
        - '!README.md'
        - functions/user/placeOrder.js
        - functions/user/include.js
    events:
      - http:
          path: /api/placeOrder
          method: post
          cors: true
          authorizer: 
            name: cognito-authorizer-named
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - ServerlessCognitoUserPool
                - Arn
            claims:
              - email

  # getOrders:
  #   handler: functions/user/getOrders.handler
  #   package:
  #     patterns:
  #       - '!functions/**'
  #       - '!package.json'
  #       - '!package-lock.json'
  #       - '!README.md'
  #       - functions/user/getOrders.js
  #       - functions/user/include.js
  #   events:
  #     - http:
  #         path: /api/placeOrder
  #         method: post
  #         cors: true
  #         # private: true
  #         authorizer: 
  #           name: cognito-authorizer-named
  #           type: COGNITO_USER_POOLS
  #           arn:
  #             Fn::GetAtt:
  #               - ServerlessCognitoUserPool
  #               - Arn
  #           claims:
  #             - email  
resources:
  Resources:
      ServerlessCognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: serverless-auth-user-pool
          Policies:
            PasswordPolicy:
              MinimumLength: 8
          UsernameAttributes:
            - email
          Schema:
            - AttributeDataType: String
              Name: email
              Required: true
          AutoVerifiedAttributes: ["email"] # for now lets verify email auto.. no need to verify email by token

      ServerlessCognitoPoolUserClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          UserPoolId: !Ref ServerlessCognitoUserPool
          ClientName: serverless-auth--user-pool-client-ui
          ExplicitAuthFlows:
            # - ALLOW_ADMIN_USER_PASSWORD_AUTH
            # - ALLOW_REFRESH_TOKEN_AUTH
            - "ADMIN_NO_SRP_AUTH"  # verify user by username and password
          # GenerateSecret: false
          # AccessTokenValidity: 5
          # IdTokenValidity: 5
          # SupportedIdentityProviders:
          #   - COGNITO

      OrderDynamoDB:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: OrderTable
          AttributeDefinitions:
            - AttributeName: OrderID
              AttributeType: S
            - AttributeName: Username
              AttributeType: S


          KeySchema:
            - AttributeName: OrderID
              KeyType: HASH
            - AttributeName: Username
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

outputs:
  CognitoClientID: !Ref ServerlessCognitoPoolUserClient
  CognitoUserPoolID: !Ref ServerlessCognitoUserPool
  OrderDynamoDBTableName: !Ref  OrderDynamoDB
  